## TEST LARAVEL

/* ### 1. Un usuario realizó una publicación el día de ayer, hoy un administrador del sistema necesita visualizar la 
publicación que se hizo y que usuario la realizó. Explica si el código a continuación es correcto.
*/

/* ### 1. A user made a post yesterday, today a system administrator needs to see the content of the post that was 
made and which user made it Explain if the code below is correct.
*/

~~~
<?php
class Post extends Model {
    /**
    * Model Post.php
    * Get the author of the post.
    */
    public function user()
    {
        return $this->hasOne(User::class);
    }
}
?>
~~~
/*
    Respuesta: En el método Show del siguiente contralador, el método mencionado no discrimina si es por fecha sino por ID, por ende, dicho método podria modificarse 
    agregando una condición como lo es la fecha anterior.
*/
~~~
<?php
class PostController extends Controller {
    * Method GET 
    * api : api/post/{id}
    * Get the post.
    */
    public function show($id)
    {
        $fechaAnterior = new DateTime();
        $fechaAnterior = $fechaAnterior->substract("1", "day");
        //$post = Post::find($id);
        $post = Post::where(['id'=>$id, 'created_at'=> $fechaAnterior])->get();
        return $post;
    }
}
?>
~~~


/* ### 2. Un desarrollador necesita dar solución a una petición, la cual debe cargar cierta información. 
Esta información tiene es un conjunto de registros los cuales tiene los campos: User_Id, Tittle_Post, Comment. 
Se debe tener en consideración el tiempo de ejecución, que el usuario que realiza el port exista y que el número
de registros sea mínimo 10000. Explica si el código a continuación es correcto.
*/

/* ### 2. A developer needs to provide a solution to a request, which must load certain information. 
This information is a set of records with the following fields: User_Id, Tittle_Post, Comment. 
It is necessary to consider the execution time, the user who performs the port exists and the number of records is at least 10000.
Explain if the following code is correct.
*/

/*
    Respuesta: No existe una comprobación de que por via Request vengan 10000 Registros como requerimientos minimo, adicionalmente al momento de crear un Post por
    usuario, no cuenta con los atributos requeridos en el planteamiento.

    Adicionalmente, en la User::find($element['User_Id']) esta de mas en la solucion dado que ya se tiene disponible el ID del usuario por cada elemento del array 
    enviado via Request.
*/

~~~
<?php
class PostController extends Controller {
    /*
    * User has relationship one to many with Post
    * Post has relationship one to many with Comments
    * User has relationship one to many with Comments
    * $request = [];
    *
    */
    public function setData(Request $request){
        $data = $request->data;
        for($element in $data){
            $user = User::find($element['User_Id']); // <- Esta linea sobra en la solución
            if($user){
                //$post = Post::create([
                //    'title' => $element['Tittle_Post'],
                //])
                
                $post = Post::create([
                    'title' => $element['Tittle_Post'],
                    'user_id' => $element['User_id'] // <- Falto ese valor en el array de la creacion del post
                ]);
                    
                DB->connection('data_base')->table('comments')->insert([
                    'comment' => $element['Comment'],
                    'post_id' => $post->id,
                    'user_id' => $user->id
                ]);
            }
        }
    }
}
?>
~~~


/* ### 3. Se necesita descargar un archivo con las alertas del sistema que los usuarios han generado, 
el número de registros de alertas superan los 6k registros. Explica el código a continuación y qué necesitas
 agregar para que este funcione.
*/

/* ### 3. You need to download a file with the system alerts generated by the users, 
the number of alert records exceeds 6k records. Explain the code below and what you need to adding to make it work.
*/
~~~
<?php
/*
 * $request->ids = Id's of the Users that i want to see in the report.
 *
*/
public function downloadAlerts(Request $request)
    {
        ImportAlerts::dispatch(
            $request->ids
        );

        $response         = new \stdClass();
        $response->status   = 200;
        $response->message   = 'The report is being generated, you will receive an email when finished.';

        return response()->json(
            $response,
            200
        );
    }

?>
~~~
